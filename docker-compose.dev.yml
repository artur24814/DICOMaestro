version: '3.9'

services:
  db:
    image: postgres:13-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DB_DB}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    restart: always
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             gunicorn core.wsgi:application --bind 0.0.0.0:8080"
    volumes:
      - backend_static:/backend/staticfiles
      - ./error_reporting:/backend/error_reporting
    expose:
      - 8080
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - DB_HOST=${DB_HOST}
      - DB_DB=${DB_DB}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
    depends_on:
      - db

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    volumes:
      - frontend_build:/frontend/build
    expose:
      - 3000
    restart: always

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - frontend_build:/usr/share/nginx/html
      - backend_static:/usr/share/nginx/html/backend_static
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
    restart: always

volumes:
  backend_static:
  postgres_data:
  frontend_build: